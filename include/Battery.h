#ifndef BATTERY_H
#define BATTERY_H
#include <Arduino.h>
#include "bcc.h"
#include "config.h"
#include "pins.h"
#include "states.h"

typedef struct
{
    const uint8_t address;
    const uint16_t defaultVal;
    const float value;
} bcc_init_reg_t;

static const bcc_init_reg_t init_regs[INIT_REG_CNT] = {
    {MC33771C_GPIO_CFG1_OFFSET, MC33771C_GPIO_CFG1_POR_VAL, GPIO_CFG1},
    {MC33771C_GPIO_CFG2_OFFSET, MC33771C_GPIO_CFG2_POR_VAL, GPIO_CFG2},
    {MC33771C_TH_ALL_CT_OFFSET, MC33771C_TH_ALL_CT_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT14_OFFSET, MC33771C_TH_CT14_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT13_OFFSET, MC33771C_TH_CT13_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT12_OFFSET, MC33771C_TH_CT12_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT11_OFFSET, MC33771C_TH_CT11_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT10_OFFSET, MC33771C_TH_CT10_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT9_OFFSET, MC33771C_TH_CT9_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT8_OFFSET, MC33771C_TH_CT8_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT7_OFFSET, MC33771C_TH_CT7_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT6_OFFSET, MC33771C_TH_CT6_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT5_OFFSET, MC33771C_TH_CT5_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT4_OFFSET, MC33771C_TH_CT4_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT3_OFFSET, MC33771C_TH_CT3_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT2_OFFSET, MC33771C_TH_CT2_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_CT1_OFFSET, MC33771C_TH_CT1_POR_VAL, PRM_CELL_MAX_VOLT},
    {MC33771C_TH_AN6_OT_OFFSET, MC33771C_TH_AN6_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN5_OT_OFFSET, MC33771C_TH_AN5_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN4_OT_OFFSET, MC33771C_TH_AN4_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN3_OT_OFFSET, MC33771C_TH_AN3_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN2_OT_OFFSET, MC33771C_TH_AN2_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN1_OT_OFFSET, MC33771C_TH_AN1_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN0_OT_OFFSET, MC33771C_TH_AN0_OT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN6_UT_OFFSET, MC33771C_TH_AN6_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN5_UT_OFFSET, MC33771C_TH_AN5_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN4_UT_OFFSET, MC33771C_TH_AN4_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN3_UT_OFFSET, MC33771C_TH_AN3_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN2_UT_OFFSET, MC33771C_TH_AN2_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN1_UT_OFFSET, MC33771C_TH_AN1_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_TH_AN0_UT_OFFSET, MC33771C_TH_AN0_UT_POR_VAL, CELL_MAX_TEMP},
    {MC33771C_CB1_CFG_OFFSET, MC33771C_CB1_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB2_CFG_OFFSET, MC33771C_CB2_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB3_CFG_OFFSET, MC33771C_CB3_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB4_CFG_OFFSET, MC33771C_CB4_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB5_CFG_OFFSET, MC33771C_CB5_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB6_CFG_OFFSET, MC33771C_CB6_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB7_CFG_OFFSET, MC33771C_CB7_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB8_CFG_OFFSET, MC33771C_CB8_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB9_CFG_OFFSET, MC33771C_CB9_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB10_CFG_OFFSET, MC33771C_CB10_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB11_CFG_OFFSET, MC33771C_CB11_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB12_CFG_OFFSET, MC33771C_CB12_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB13_CFG_OFFSET, MC33771C_CB13_CFG_POR_VAL, CBX_CFG},
    {MC33771C_CB14_CFG_OFFSET, MC33771C_CB14_CFG_POR_VAL, CBX_CFG}
};

class Battery
{
private:
public:
    float minCellVolt, maxCellVolt;
    float minChargeVolt, maxChargeVolt;

    float batVoltage, batSOC;
    float max_output_current;

    bcc_drv_config_t drvConfig;
    float cellVoltage[140];
    float stackVoltage[10];
    float cellTemp[140];
    float balTemp[140]; 
    float cellSOC[140];
    
    Battery();
    void init();
    
    // big functions
    bool system_check(bool startup);
    void check_acu();
    void check_battery();
    
    // read data from bcc
    void readDeviceMeasurements();

    // self checks
    void checkTemperature();
    void checkVoltage();
    void checkFuse();
    bool checkStatus();

    void toggleCellBalancing(bool enable);
    void printDeviceMeasurements();
    void init_registers();
};

void clear_faults(bcc_drv_config_t * drvConfig);
#endif